domain: bigbang.dev

registryCredentials:
  registry: "###ZARF_REGISTRY###"
  username: "zarf-pull"
  password: "###ZARF_REGISTRY_AUTH_PULL###"

git:
  existingSecret: "private-git-server"

networkPolicies:
  enabled: true
  # When in prod use a real CIDR. Don't do this, it isn't secure.
  controlPlaneCidr: "0.0.0.0/0"
  nodeCidr: "0.0.0.0/0"
  vpcCidr: "0.0.0.0/0"

metricsServer:
  enabled: false

# Default values set by Big Bang: https://repo1.dso.mil/platform-one/big-bang/bigbang/-/blob/1.43.0/chart/values.yaml
#
# Istio default values: https://repo1.dso.mil/platform-one/big-bang/apps/core/istio-controlplane/-/blob/1.14.3-bb.4/chart/values.yaml
istio:
  enabled: true
  git:
    repo: http://zarf-gitea-http.zarf.svc.cluster.local:3000/zarf-git-user/mirror__repo1.dso.mil__platform-one__big-bang__apps__core__istio-controlplane.git
  keycloak:
    enabled: true
  ingressGateways:
    public-ingressgateway:
      type: "LoadBalancer"
      kubernetesResourceSpec:
        resources:
          requests:
            cpu: "100m"
            memory: "512Mi"
          limits:
            cpu: "500m"
            memory: "512Mi"
    passthrough-ingressgateway:
      type: "LoadBalancer"
  values:
    istiod:
      resources:
        requests:
          cpu: "100m"
          memory: "1Gi"
        limits:
          cpu: "500m"
          memory: "1Gi"
      hpaSpec:
        maxReplicas: 1
    values:
      global:
        proxy:
          resources:
            requests:
              memory: "1Gi"
            limits:
              memory: "1Gi"
  gateways:
    public:
      ingressGateway: public-ingressgateway
      hosts:
        - gitlab.{{ .Values.domain }}
        - jenkins.{{ .Values.domain }}
        - jira.{{ .Values.domain }}
        - confluence.{{ .Values.domain }}
        - registry.{{ .Values.domain }}
        - artifactory.{{ .Values.domain }}
    passthrough:
      ingressGateway: passthrough-ingressgateway
      hosts:
        - keycloak.{{ .Values.domain }}
      tls:
        mode: "PASSTHROUGH"

# Istio-Operator default values: https://repo1.dso.mil/platform-one/big-bang/apps/core/istio-operator/-/blob/1.14.3-bb.0/chart/values.yaml
istiooperator:
  enabled: true
  git:
    repo: http://zarf-gitea-http.zarf.svc.cluster.local:3000/zarf-git-user/mirror__repo1.dso.mil__platform-one__big-bang__apps__core__istio-operator.git
  values:
    hub: "###ZARF_REGISTRY###/ironbank/opensource/istio"
    operator:
      resources:
        limits:
          cpu: "500m"
          memory: "256Mi"
        requests:
          cpu: "100m"
          memory: "256Mi"

# Jaeger default values: https://repo1.dso.mil/platform-one/big-bang/apps/core/jaeger/-/blob/2.35.0-bb.1/chart/values.yaml
jaeger:
  enabled: true
  git:
    repo: http://zarf-gitea-http.zarf.svc.cluster.local:3000/zarf-git-user/mirror__repo1.dso.mil__platform-one__big-bang__apps__core__jaeger.git
  values:
    istio:
      mtls:
        mode: STRICT
    jaeger:
      spec:
        allInOne:
          resources:
            requests:
              cpu: "100m"
              memory: "128Mi"
            limits:
              cpu: "500m"
              memory: "128Mi"
        collector:
          resources:
            requests:
              cpu: "100m"
              memory: "128Mi"
            limits:
              cpu: "500m"
              memory: "128Mi"
    resources:
      limits:
        cpu: "500m"
        memory: "128Mi"
      requests:
        cpu: "100m"
        memory: "128Mi"

# Kiali default values: https://repo1.dso.mil/platform-one/big-bang/apps/core/kiali/-/blob/1.56.1-bb.1/chart/values.yaml
kiali:
  enabled: true
  git:
    repo: http://zarf-gitea-http.zarf.svc.cluster.local:3000/zarf-git-user/mirror__repo1.dso.mil__platform-one__big-bang__apps__core__kiali.git
  values:
    istio:
      mtls:
        mode: PERMISSIVE
    resources:
      requests:
        cpu: "100m"
        memory: "512Mi"
      limits:
        cpu: "500m"
        memory: "512Mi"
    cr:
      spec:
        deployment:
          resources:
            requests:
              cpu: "200m"
              memory: "512Mi"
            limits:
              cpu: "500m"
              memory: "512Mi"

# Cluster-Auditor default values: https://repo1.dso.mil/platform-one/big-bang/apps/core/cluster-auditor/-/blob/1.4.0-bb.10/chart/values.yaml
clusterAuditor:
  enabled: true
  git:
    repo: http://zarf-gitea-http.zarf.svc.cluster.local:3000/zarf-git-user/mirror__repo1.dso.mil__platform-one__big-bang__apps__core__cluster-auditor.git
  values:
    istio:
      mtls:
        mode: PERMISSIVE
    resources:
      requests:
        cpu: "100m"
        memory: "512Mi"
      limits:
        cpu: "500m"
        memory: "512Mi"

# Gatekeeper default values: https://repo1.dso.mil/platform-one/big-bang/apps/core/policy/-/blob/3.9.0-bb.2/chart/values.yaml
gatekeeper:
  enabled: true
  git:
    repo: http://zarf-gitea-http.zarf.svc.cluster.local:3000/zarf-git-user/mirror__repo1.dso.mil__platform-one__big-bang__apps__core__policy.git
  values:
    istio:
      mtls:
        mode: PERMISSIVE
    controllerManager:
      resources:
        limits:
          cpu: "2"
          memory: "4Gi"
        requests:
          cpu: "250m"
          memory: "1Gi"
    audit:
      resources:
        limits:
          cpu: "2"
          memory: "4Gi"
        requests:
          cpu: "250m"
          memory: "1Gi"
    violations:
      allowedDockerRegistries:
        match:
          # Make Kind/K3d happy
          excludedNamespaces:
            - "kube-sytem"
            - "istio-system"
            - "local-path-storage"
        parameters:
          repos:
            - "###ZARF_REGISTRY###"
          excludedResources:
            # K3s needs this if you are doing K3s-specific "HelmRelease"-type CRDs
            - ".*/helm-install-.*"
            - ".*/helm"
      allowedHostFilesystem:
        match:
          # Make Kind/K3d happy
          excludedNamespaces:
            - "kube-sytem"
            - "local-path-storage"
      hostNetworking:
        match:
          excludedNamespaces:
            - "kube-system"
            - "istio-system"
      restrictedTaint:
        match:
          # Make Kind/K3d happy
          excludedNamespaces:
            - "kube-sytem"
            - "local-path-storage"
      volumeTypes:
        match:
          # Make Kind/K3d happy
          excludedNamespaces:
            - "kube-sytem"
            - "local-path-storage"

logging:
  enabled: false

eckoperator:
  enabled: false

fluentbit:
  enabled: false

# Loki default values: https://repo1.dso.mil/platform-one/big-bang/apps/sandbox/loki/-/blob/1.8.10-bb.2/chart/values.yaml
loki:
  enabled: true
  git:
    repo: http://zarf-gitea-http.zarf.svc.cluster.local:3000/zarf-git-user/mirror__repo1.dso.mil__platform-one__big-bang__apps__sandbox__loki.git
  strategy: "scalable"
  objectStorage:
    endpoint: minio.minio.svc.cluster.local
    region: "minio"
    # accessKey: "" -- Added in environment-bb/values.yaml
    # accessSecret: "" -- Added in environment-bb/values.yaml
    bucketNames:
      chunks: loki-logs
      ruler: loki-ruler
      admin: loki-admin
  values:
    read:
      replicas: 1
    write:
      replicas: 1
    minio:
      enabled: false
    istio:
      mtls:
        mode: PERMISSIVE

# Promtail default values: https://repo1.dso.mil/platform-one/big-bang/apps/sandbox/promtail/-/blob/6.2.2-bb.2/chart/values.yaml
promtail:
  enabled: true
  git:
    repo: http://zarf-gitea-http.zarf.svc.cluster.local:3000/zarf-git-user/mirror__repo1.dso.mil__platform-one__big-bang__apps__sandbox__promtail.git
  values:
    istio:
      mtls:
        mode: PERMISSIVE
    resources:
      limits:
        cpu: "500m"
        memory: "750Mi"
      requests:
        cpu: "100m"
        memory: "256Mi"

# Monitoring default values: https://repo1.dso.mil/platform-one/big-bang/apps/core/monitoring/-/blob/40.0.0-bb.0/chart/values.yaml
monitoring:
  enabled: true
  git:
    repo: http://zarf-gitea-http.zarf.svc.cluster.local:3000/zarf-git-user/mirror__repo1.dso.mil__platform-one__big-bang__apps__core__monitoring.git
  values:
    istio:
      mtls:
        mode: PERMISSIVE
    cleanUpgrade:
      resources:
        requests:
          memory: "128Mi"
          cpu: "100m"
        limits:
          memory: "256Mi"
          cpu: "200m"
    alertmanager:
      alertmanagerSpec:
        resources:
          limits:
            cpu: "500m"
            memory: "256Mi"
          requests:
            cpu: "100m"
            memory: "256Mi"
    grafana:
      resources:
        limits:
          cpu: "500m"
          memory: "512Mi"
        requests:
          cpu: "100m"
          memory: "256Mi"
      sidecar:
        resources:
          limits:
            cpu: "500m"
            memory: "100Mi"
          requests:
            cpu: "50m"
            memory: "50Mi"
      downloadDashboards:
        resources:
          limits:
            cpu: "20m"
            memory: "20Mi"
          requests:
            cpu: "20m"
            memory: "20Mi"
    kube-state-metrics:
      resources:
        limits:
          cpu: "500m"
          memory: "128Mi"
        requests:
          cpu: "10m"
          memory: "128Mi"
    prometheus-node-exporter:
      resources:
        limits:
          cpu: "500m"
          memory: "128Mi"
        requests:
          cpu: "100m"
          memory: "128Mi"
    prometheusOperator:
      admissionWebhooks:
        patch:
          resources:
            limits:
              cpu: "100m"
              memory: "128Mi"
            requests:
              cpu: "50m"
              memory: "128Mi"
        cleanupProxy:
          resources:
            limits:
              cpu: "100m"
              memory: "128Mi"
            requests:
              cpu: "50m"
              memory: "128Mi"
      resources:
        limits:
          cpu: "500m"
          memory: "512Mi"
        requests:
          cpu: "100m"
          memory: "512Mi"
      prometheusConfigReloader:
        resources:
          requests:
            cpu: "50m"
            memory: "128Mi"
          limits:
            cpu: "100m"
            memory: "128Mi"
    prometheus:
      prometheusSpec:
        resources:
          limits:
            cpu: "300m"
            memory: "2Gi"
          requests:
            cpu: "100m"
            memory: "2Gi"

twistlock:
  # Disabling Twistlock for now since Big Bang now needs a license to be specified for Twistlock to initialize successfully. Will re-evaluate turning it back on later, or possibly swap it out for Neuvector once that becomes available.
  enabled: false

sso:
  oidc:
    host: keycloak.bigbang.dev

addons:
#####################################################################################################################
# Day 2 Updates. Add chains below. One per application and add the callback_uri, client_id and client_secret values.
#####################################################################################################################
#  authservice:
#    enabled: true
#    values:
#      chains:
#        myapp:
#          match:
#            header: ":authority"
#            prefix: "myapp"
#          callback_uri: https://myapp.bigbang.dev/login/generic_oauth
#          # CHANGEME: Enter a valid client ID e.g. demo-env_a8604cc9-f5e9-4656-802d-d05624370245_bb8-myapp
#          client_id: "CHANGEME_CLIENT_ID"
#          # CHANGEME: Enter a valid client Secret e.g. fsCUSkwy2kaaSlgN4r4LPYOAvHCqzUk5
#          client_secret: "CHANGEME_CLIENT_SECRET"
#####################################################################################################################

  minioOperator:
    enabled: true
    git:
      repo: http://zarf-gitea-http.zarf.svc.cluster.local:3000/zarf-git-user/mirror__repo1.dso.mil__platform-one__big-bang__apps__application-utilities__minio-operator.git
    values:
      operator:
        resources:
          requests:
            cpu: 200m
            memory: 256Mi
            ephemeral-storage: 500Mi
          limits:
            cpu: 200m
            memory: 256Mi
      istio:
        enabled: true
        mtls:
          mode: PERMISSIVE

  minio:
    enabled: true
    git:
      repo: http://zarf-gitea-http.zarf.svc.cluster.local:3000/zarf-git-user/mirror__repo1.dso.mil__platform-one__big-bang__apps__application-utilities__minio.git
    values:
      istio:
        mtls:
          mode: PERMISSIVE
      # https://github.com/minio/operator/blob/master/docs/crd.adoc
      tenants:
        # Required to be here due to a weird quirk in bucket creation. See https://github.com/minio/operator/issues/1002#issuecomment-1028394242
        users:
          - name: minio-user-credentials
        # Pre-create buckets that will be needed for various services that will use MinIO
        # NOTE: Region is meaningless in this instantiation of MinIO. It's a required field but the value could be just about anything and it would work fine.
        buckets:
          # velero-backups
          - name: "velero-backups"
            region: "minio"
            objectLock: true
          # loki-logs
          - name: "loki-logs"
            region: "minio"
            objectLock: true
          - name: "loki-ruler"
            region: "minio"
            objectLock: true
          - name: "loki-admin"
            region: "minio"
            objectLock: true
        pools:
          - servers: 3
            volumesPerServer: 2
            size: 5Gi
            storageClassName: ""
            tolerations: {}
            nodeSelector: {}
            affinity: {}
            resources:
              requests:
                cpu: 250m
                memory: 2Gi
              limits:
                cpu: 250m
                memory: 2Gi
            securityContext:
              runAsUser: 1001
              runAsGroup: 1001
              fsGroup: 1001
              runAsNonRoot: true

  velero:
    enabled: false
    git:
      repo: http://zarf-gitea-http.zarf.svc.cluster.local:3000/zarf-git-user/mirror__repo1.dso.mil__platform-one__big-bang__apps__cluster-utilities__velero.git
    plugins:
      - aws
    values:
      initContainers:
       - name: velero-plugin-for-aws
         image: registry1.dso.mil/ironbank/opensource/velero/velero-plugin-for-aws:v1.5.0
         imagePullPolicy: IfNotPresent
         volumeMounts:
           - mountPath: /target
             name: plugins
         resources:
           requests:
             memory: 512Mi
             cpu: 100m
           limits:
             memory: 512Mi
             cpu: 100m
      resources:
        # Demo/PoC values. Adjust for production
        requests:
          cpu: 100m
          memory: 256Mi
        limits:
          cpu: 10
          memory: 512Mi
      configuration:
        provider: aws
        backupStorageLocation:
          bucket: velero-backups
          config:
            region: minio
            s3ForcePathStyle: "true"
            s3Url: http://minio.minio.svc.cluster.local:80
        volumeSnapshotLocation:
          name: default
          config:
            region: minio
        defaultVolumesToRestic: true
        defaultResticPruneFrequency: 168h
      deployRestic: true
      restic:
        # Demo/PoC values. Adjust for production
        resources:
          requests:
            cpu: 100m
            memory: 256Mi
          limits:
            cpu: 10
            memory: 1024Mi

  kyverno:
    enabled: false
    git:
      repo: http://zarf-gitea-http.zarf.svc.cluster.local:3000/zarf-git-user/mirror__repo1.dso.mil__platform-one__big-bang__apps__sandbox__keyverno.git
 
  keycloak:
    enabled: true
    git:
      repo: http://zarf-gitea-http.zarf.svc.cluster.local:3000/zarf-git-user/mirror__repo1.dso.mil__platform-one__big-bang__apps__security-tools__keycloak.git
    values:
      replicas: 1
    ingress:
      gateway: "passthrough"
